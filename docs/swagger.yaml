definitions:
  models.CreateUser:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.EmailResetPassword:
    properties:
      email:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.LoginUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.ResetPasswordById:
    properties:
      confirm_password:
        type: string
      new_password:
        type: string
    type: object
  models.Snack:
    properties:
      category:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      unit:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      data:
        type: integer
      message:
        type: string
    type: object
  models.SuccessResponseLogin:
    properties:
      data:
        $ref: '#/definitions/models.Token'
      message:
        type: string
    type: object
  models.SuccessResponseResetPassword:
    properties:
      data:
        $ref: '#/definitions/models.TokenResetPassword'
    type: object
  models.SuccessResponseSnack:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Snack'
        type: array
      message:
        type: string
    type: object
  models.SuccessResponseUser:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        type: string
    type: object
  models.Token:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  models.TokenResetPassword:
    properties:
      token:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      no_hp:
        type: string
      profile_picture:
        type: string
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: User by id with id in the URL path
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Endpoint for user by id
      tags:
      - users
  /password/reset:
    post:
      consumes:
      - application/json
      description: Reset Password User with email
      parameters:
      - description: User reset password object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.EmailResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseResetPassword'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Endpoint for user reset password
      tags:
      - Reset Password
  /password/reset/{id}:
    put:
      consumes:
      - application/json
      description: Reset Password User with email
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User reset password object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordById'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseResetPassword'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Endpoint for user reset password
      tags:
      - Reset Password
  /snack:
    get:
      consumes:
      - application/json
      description: Snack
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseSnack'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Endpoint for snack by id
      tags:
      - snacks
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user with username and password
      parameters:
      - description: User login object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Endpoint for user login
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Endpoint create a new user
      tags:
      - users
swagger: "2.0"
